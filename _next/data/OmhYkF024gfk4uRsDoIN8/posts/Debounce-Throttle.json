{"pageProps":{"post":{"title":"Debounce & Throttle","date":"2021-03-09T00:00:00.000Z","content":"<p>디바운싱과 쓰로틀링 모두 반복적인 입력에 대한 이벤트 처리를 일정한 규칙에 따라 제한함으로써, 발생하는 이벤트의 양을 줄이고 성능의 향상, 비용의 절감을 가져올 수 있는 기법입니다.</p>\n<h2>Debounce</h2>\n<p>debounce는 같은 함수가 연속으로 호출될 때, 마지막 함수만 호출하도록 제어하는 것을 의미합니다.\r\n예를 들어, 키보드 입력이 멈추면 자동으로 입력창의 내용을 ajax로 요청하는 경우가 있습니다. 이 때, 키보드를 누를 때마다 API에 요청을 보내는 것은 불필요한 함수 실행으로 성능을 떨어뜨리고 네트워크 비용을 증가시키게 됩니다.</p>\n<p>이를 제어하기 위한 debounce 코드는 다음과 같이 작성할 수 있습니다.</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">debounce</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">callback<span class=\"token punctuation\">,</span> t <span class=\"token operator\">=</span> <span class=\"token number\">200</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> timer<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token parameter\">e</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>timer<span class=\"token punctuation\">)</span> <span class=\"token function\">clearTimeout</span><span class=\"token punctuation\">(</span>timer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    timer <span class=\"token operator\">=</span> <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p><code>debounce()</code>는 두 개의 파라미터를 전달받습니다.</p>\n<ul>\n<li><code>callback</code> : 실제로 실행되어야 하는 로직을 담은 콜백함수</li>\n<li><code>t</code>   : 타이머가 유지되는 시간(ms), 200을 기본값으로 설정</li>\n</ul>\n<p>그리고 <code>timer</code> 변수를 선언한 뒤, 파라미터와 <code>timer</code>를 참조하는 클로저를 반환합니다.</p>\n<ul>\n<li>반환된 클로저는 실행될 때마다 같은 <code>timer</code>를 참조하게 되므로, 이전 호출에서 설정된 <code>timer</code>가 아직 남아있다면 그 실행을 취소시키고, 자신의 <code>timer</code>를 설치합니다.</li>\n<li><code>t</code>의 시간만큼 새로운 호출이 실행되지 않는다면  <code>callback</code>이 실행되게 됩니다.</li>\n</ul>\n<p>정의한 함수는 다음과 같이 활용할 수 있습니다.</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">callback</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'resized'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token dom variable\">window</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'resize'</span><span class=\"token punctuation\">,</span> <span class=\"token function\">debounce</span><span class=\"token punctuation\">(</span>callback<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<h2>Throttle</h2>\n<p>위에서 본 것처럼 debounce는 모든 연속적인 입력이 끝난 뒤 마지막 입력에 대해서만 콜백을 실행합니다. 반면 throttle은 일정한 시간 간격마다의 실행을 보장합니다.</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword module\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">throttle</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">callback<span class=\"token punctuation\">,</span> t <span class=\"token operator\">=</span> <span class=\"token number\">200</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> timer<span class=\"token punctuation\">;</span>\n  \n  <span class=\"token keyword control-flow\">return</span> <span class=\"token parameter\">e</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>timer<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      timer <span class=\"token operator\">=</span> <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token function\">callback</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        timer <span class=\"token operator\">=</span> <span class=\"token keyword null nil\">null</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p><code>throttle()</code>도 마찬가지로 <code>callback</code>과 <code>t</code>를 인자로 전달받고, <code>timer</code>를 참조하는 클로저를 반환합니다.\r\n<code>debounce()</code>와 다른 점은, <code>timer</code>가 존재하지 않을 때만 <code>timer</code>에 <code>setTimeout()</code>을 설정해주는 것입니다.</p>\n<ul>\n<li><code>setTimeout()</code>의 반환값은 0이 아닌 숫자 <code>timeoutID</code> 로,  타임아웃이 실행되고 난 뒤에도 사라지지 않습니다.</li>\n<li>따라서 <code>setTimeout()</code>의 콜백에는 실행 후 <code>timer</code>의 값을 초기화하는 코드가 포함되어야 합니다.</li>\n</ul>\n<p>정의한 함수는 다음과 같은 방식으로 사용할 수 있습니다.</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">callback</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'scrolled'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token dom variable\">window</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'scroll'</span><span class=\"token punctuation\">,</span> <span class=\"token function\">throttle</span><span class=\"token punctuation\">(</span>callback<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n","slug":"Debounce-Throttle"}},"__N_SSG":true}