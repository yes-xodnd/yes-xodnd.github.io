{"pageProps":{"post":{"title":"Flux패턴으로 Todo 앱 구현하기","date":"2021-07-19T00:00:00.000Z","content":"<p>Flux패턴을 이용하여 todo 리스트를 구현해보았습니다.\r\n<a href=\"https://yes-xodnd.github.io/flux-todo\">여기</a>에서 데모를 실행해볼 수 있습니다.</p>\n<h2>파일 구조</h2>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">src/\r\n├ stores/\r\n├ views/\r\n├ action.js\r\n└ flux.js</code></pre></div>\n<p>주요 파일구조는 위와 같습니다. Flux 패턴의 네 가지 요소인 디스패처, 스토어, 액션, 뷰에 해당하는 파일 또는 폴더를 생성했습니다. 여러 개의 파일이 있을 수 있는 요소는 폴더로 생성했습니다. <code>flux.js</code> 파일에는 디스패처와 스토어 생성 함수를 합쳐 관리하도록 하였습니다.</p>\n<h2>Flux 요소 구현 내용</h2>\n<h3>디스패처 Dispatcher</h3>\n<ul>\n<li><code>register</code> 메소드로 스토어는 디스패처에 등록할 수 있습니다.</li>\n<li><code>dispatch</code> 메소드로 등록된 스토어에 액션을 전달할 수 있습니다.</li>\n<li>클로저로 구현하여 스토어 목록에 직접 접근하거나 수정할 수 없습니다.</li>\n<li>즉시실행함수로 애플리케이션 당 하나의 디스패처만 존재할 수 있게 합니다.</li>\n<li><code>dispatch</code> 함수만 외부에서 사용할 수 있도록 export 합니다.</li>\n</ul>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// src/flux.js</span>\n<span class=\"token keyword\">const</span> dispatcher <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> stores <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> dispatcher <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token doc-comment comment\">/**\n     * 디스패처에 스토어를 등록합니다.\n     * 스토어의 dispatch 함수를 인자로 받습니다.\n     * <span class=\"token keyword\">@param</span> <span class=\"token class-name\"><span class=\"token punctuation\">{</span>Function<span class=\"token punctuation\">}</span></span> <span class=\"token parameter\">dispatchStore</span> \n     */</span>\n    <span class=\"token function\">register</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">dispatchStore</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      stores<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">push</span><span class=\"token punctuation\">(</span>dispatchStore<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token doc-comment comment\">/**\n     * 등록된 스토어에 액션을 디스패치합니다.\n     * 액션 객체를 인자로 받습니다.\n     * <span class=\"token keyword\">@param</span> <span class=\"token class-name\"><span class=\"token punctuation\">{</span>Object<span class=\"token punctuation\">}</span></span> <span class=\"token parameter\">action</span> \n     */</span>\n    <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">action</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      stores<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">dispatchStore</span> <span class=\"token arrow operator\">=></span> <span class=\"token function\">dispatchStore</span><span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword control-flow\">return</span> dispatcher<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword module\">export</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> dispatch <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> dispatcher<span class=\"token punctuation\">;</span>\n</code></pre></div>\n<h3>스토어 Stores</h3>\n<ul>\n<li><code>initState</code>와 <code>reducer</code>를 전달하여 스토어를 생성할 수 있습니다.</li>\n<li>클로저로 구현하여 스토어의 <code>state</code> 객체에는 외부에서 직접 접근하거나 수정할 수 없습니다.\r\ngetter로 <code>getState</code> 메소드를 제공하며, 항상 사본을 반환합니다.</li>\n<li><code>subscribe</code> 메소드를 통해 컴포넌트들은 스토어 <code>state</code>의 변경을 구독할 수 있습니다.\r\n변경이 있을 때 구독한 컴포넌트들은 리렌더링 됩니다.</li>\n<li><code>dispatch</code> 메소드를 통해 외부(디스패처)에서 액션을 전달받고, <code>reducer</code> 를 통해 <code>state</code>를 새로운 값으로 변경할 수 있습니다.</li>\n<li>스토어를 생성하면 디스패처에 자동으로 등록됩니다.</li>\n</ul>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// src/flux.js</span>\n<span class=\"token doc-comment comment\">/**\n * 초기화 상태와 리듀서 함수를 받아 스토어를 생성합니다.\n * <span class=\"token keyword\">@param</span> <span class=\"token class-name\"><span class=\"token punctuation\">{</span><span class=\"token operator\">*</span><span class=\"token punctuation\">}</span></span> <span class=\"token parameter\">initState</span>\n * <span class=\"token keyword\">@param</span> <span class=\"token class-name\"><span class=\"token punctuation\">{</span>Function<span class=\"token punctuation\">}</span></span> <span class=\"token parameter\">reducer</span> \n * <span class=\"token keyword\">@returns</span> \n */</span>\n<span class=\"token keyword module\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">createStore</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>initState<span class=\"token punctuation\">,</span> <span class=\"token function-variable function\">reducer</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> state <span class=\"token operator\">=</span> initState<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> subscribers <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token doc-comment comment\">/**\n   * 액션 객체를 전달받고, 리듀서로 상태를 업데이트합니다.\n   * 스토어를 구독하는 컴포넌트를 리렌더링 합니다.\n   * <span class=\"token keyword\">@param</span> <span class=\"token class-name\"><span class=\"token punctuation\">{</span>Object<span class=\"token punctuation\">}</span></span> <span class=\"token parameter\">action</span> \n   */</span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">dispatch</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">action</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    state <span class=\"token operator\">=</span> <span class=\"token function\">reducer</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">,</span> action<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    subscribers<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">component</span> <span class=\"token arrow operator\">=></span> component<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// 스토어를 디스패처에 등록합니다.</span>\n  dispatcher<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">register</span><span class=\"token punctuation\">(</span>dispatch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> store <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token doc-comment comment\">/**\n     * state의 사본을 반환합니다.\n     * <span class=\"token keyword\">@returns</span> state\n     */</span>\n    <span class=\"token function\">getState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword control-flow\">return</span> <span class=\"token function\">deepClone</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token doc-comment comment\">/**\n     * 스토어에 컴포넌트를 등록합니다.\n     * 등록한 컴포넌트는 스토어가 업데이트할 때마다 리렌더링합니다.\n     * <span class=\"token keyword\">@param</span> <span class=\"token class-name\"><span class=\"token punctuation\">{</span><span class=\"token operator\">*</span><span class=\"token punctuation\">}</span></span> <span class=\"token parameter\">component</span> \n     */</span>\n    <span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">component</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      subscribers<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">push</span><span class=\"token punctuation\">(</span>component<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token known-class-name class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">freeze</span><span class=\"token punctuation\">(</span>store<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<ul>\n<li>스토어 생성 예시는 다음과 같습니다.</li>\n</ul>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// src/stores/todo.js</span>\n<span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token punctuation\">{</span> createStore <span class=\"token punctuation\">}</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'../flux.js'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> initState <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  todos<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">reducer</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">state<span class=\"token punctuation\">,</span> action</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">switch</span> <span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">.</span><span class=\"token property-access\">type</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">'ADD_TODO'</span><span class=\"token operator\">:</span>\n      state<span class=\"token punctuation\">.</span><span class=\"token property-access\">todos</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span> action<span class=\"token punctuation\">.</span><span class=\"token property-access\">data</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">todoItem</span><span class=\"token punctuation\">,</span> <span class=\"token spread operator\">...</span>state<span class=\"token punctuation\">.</span><span class=\"token property-access\">todos</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword control-flow\">return</span> state<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">case</span> <span class=\"token string\">'DELETE_TODO'</span><span class=\"token operator\">:</span>\n      state<span class=\"token punctuation\">.</span><span class=\"token property-access\">todos</span> <span class=\"token operator\">=</span> state<span class=\"token punctuation\">.</span><span class=\"token property-access\">todos</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">filter</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span> <span class=\"token arrow operator\">=></span> item<span class=\"token punctuation\">.</span><span class=\"token property-access\">id</span> <span class=\"token operator\">!==</span> action<span class=\"token punctuation\">.</span><span class=\"token property-access\">data</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">id</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword control-flow\">return</span> state<span class=\"token punctuation\">;</span>\n      \n\t\t<span class=\"token comment\">// ...</span>\n    \n    <span class=\"token keyword module\">default</span><span class=\"token operator\">:</span>\n      <span class=\"token keyword control-flow\">return</span> state<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> todoStore <span class=\"token operator\">=</span> <span class=\"token function\">createStore</span><span class=\"token punctuation\">(</span>initState<span class=\"token punctuation\">,</span> reducer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword module\">export</span> <span class=\"token keyword module\">default</span> todoStore<span class=\"token punctuation\">;</span>\n</code></pre></div>\n<h3>액션 Actions</h3>\n<ul>\n<li>액션 생성 함수를 정의합니다.</li>\n<li>액션은 <code>type</code>과 <code>data</code> 프로퍼티를 갖는 단순한 객체입니다.</li>\n</ul>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// src/actions.js</span>\n<span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token punctuation\">{</span> dispatcher <span class=\"token punctuation\">}</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'./flux.js'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> dispatch <span class=\"token operator\">=</span> dispatcher<span class=\"token punctuation\">.</span><span class=\"token property-access\">dispatch</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword module\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">addTodo</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">content</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  type<span class=\"token operator\">:</span> <span class=\"token string\">'ADD_TODO'</span><span class=\"token punctuation\">,</span>\n  data<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    todoItem<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      id<span class=\"token operator\">:</span> <span class=\"token string\">''</span> <span class=\"token operator\">+</span> <span class=\"token known-class-name class-name\">Date</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      done<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n      content\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>   \n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword module\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">clearTodo</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  type<span class=\"token operator\">:</span> <span class=\"token string\">'CLEAR_TODO'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<h3>뷰 Views</h3>\n<ul>\n<li>뷰는 클래스를 이용해 컴포넌트로 구현했습니다.</li>\n<li>생성될 때 <code>HTMLElement</code>인 <code>el</code>을 전달받아 저장합니다.</li>\n<li><code>render</code> 메소드는 새로운 DOM 트리를 생성하고 <code>el</code>과 교체하여 업데이트합니다.\r\n<code>template</code>은 문자열 또는 문자열을 반환하는 함수로, <code>innerHTML</code>을 통해 새로운 DOM 트리에 삽입됩니다.</li>\n<li>새로운 DOM 트리의 요소를 선택해 앞에서 정의한 액션 함수를 이벤트리스너로 등록할 수 있습니다.</li>\n</ul>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token punctuation\">{</span> dispatch <span class=\"token punctuation\">}</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'../flux.js'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token punctuation\">{</span> addTodo <span class=\"token punctuation\">}</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'../actions.js'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword module\">export</span> <span class=\"token keyword module\">default</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TodoInput</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">el</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">el</span> <span class=\"token operator\">=</span> el<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  template <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\"></span>\n<span class=\"token string\">    &#x3C;button class=\"button\">+&#x3C;/button></span>\n<span class=\"token string\">    &#x3C;input type=\"text\" value=\"\" placeholder=\"여기에 할 일을 입력하세요.\"/></span>\n<span class=\"token string\">  </span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> root <span class=\"token operator\">=</span> <span class=\"token dom variable\">document</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'div'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    root<span class=\"token punctuation\">.</span><span class=\"token property-access\">className</span> <span class=\"token operator\">=</span> <span class=\"token string\">'todo-input'</span><span class=\"token punctuation\">;</span>\n    root<span class=\"token punctuation\">.</span><span class=\"token property-access\">innerHTML</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">template</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">const</span> input <span class=\"token operator\">=</span> root<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'input'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> button <span class=\"token operator\">=</span> root<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'button'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">function</span> <span class=\"token function\">handleEvent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>input<span class=\"token punctuation\">.</span><span class=\"token property-access\">value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'내용을 입력해주세요!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token function\">addTodo</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">.</span><span class=\"token property-access\">value</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      input<span class=\"token punctuation\">.</span><span class=\"token property-access\">value</span> <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    button<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> handleEvent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">el</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">replaceWith</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">el</span> <span class=\"token operator\">=</span> root<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n","slug":"Flux패턴으로-Todo앱-구현하기"}},"__N_SSG":true}