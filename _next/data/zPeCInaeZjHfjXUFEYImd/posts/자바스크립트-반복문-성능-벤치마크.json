{"pageProps":{"post":{"title":"자바스크립트 반복문 성능 벤치마크","date":"2021-04-06T00:00:00.000Z","content":"<p>반복문은 프로그램의 실행 시간에 큰 영향을 줄 수 있는 요소 중 하나입니다. 알고리즘 문제를 풀면서 for loop를 사용하는 것이 좋다는 이야기를 들었는데, 얼마나 성능에 차이가 나는지는 알지 못했으므로 편의에 따라 반복문을 사용해 왔습니다. 배열을 순회하는 상황에서, 다른 반복문들도 결국 시간 복잡도로만 보자면 O(N)이므로 크게 차이가 나지 않을 것 같았기 때문입니다. 그래서 이 궁금증을 해결하기 위해 직접 테스트해보았습니다.</p>\n<blockquote>\n<ul>\n<li>반복문이 반드시 배열을 순회하는 데 사용되는 것은 아니지만, 큰 숫자의 반복문 작업은 대개 배열과 함께 사용되므로 여기에서 반복문은 배열을 순회하는 반복문이라고 가정하기로 하였습니다.</li>\n<li>테스트를 위해 만든 웹 어플리케이션은 gh-pages로 배포하여, <a href=\"https://yes-xodnd.github.io/js_benchmark/\">여기</a>에서 테스트해볼 수 있습니다.</li>\n</ul>\n</blockquote>\n<h2>테스트 설계</h2>\n<h3>측정 방법</h3>\n<p>각 반복문의 성능 측정을 위해 다음과 같은 테스트를 설계하였습니다.</p>\n<ol>\n<li>각 반복문을 이용해 배열 요소의 총합(sum)을 구하는 함수를 작성합니다.</li>\n<li>각 반복문 함수를 N번 실행하여 그 결과값의 평균을 통해 성능을 비교합니다.</li>\n<li>각 반복문 함수를 실행할 때마다 1과 100 사이의 임의의 자연수로 이루어진 특정한 길이 L의 배열을 생성해 전달합니다.</li>\n</ol>\n<h3>반복문 함수</h3>\n<p>각 반복문 함수는 다음과 같습니다. for loop에서 배열의 길이를 따로 저장하는 경우와의 성능 비교를 위해 <code>sumForLoop1</code>, <code>sumForLoop2</code> 두 개의 함수를 작성하였습니다.</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">sumForLoop1</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arr</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword control-flow\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&#x3C;</span> arr<span class=\"token punctuation\">.</span><span class=\"token property-access\">length</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    result <span class=\"token operator\">+=</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword control-flow\">return</span> result<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">sumForLoop2</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arr</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token constant\">N</span> <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span><span class=\"token property-access\">length</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword control-flow\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&#x3C;</span> <span class=\"token constant\">N</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    result <span class=\"token operator\">+=</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword control-flow\">return</span> result<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">sumWhile</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arr</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token constant\">N</span> <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span><span class=\"token property-access\">length</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  \n  <span class=\"token keyword control-flow\">while</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&#x3C;</span> <span class=\"token constant\">N</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    result <span class=\"token operator\">+=</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    i <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword control-flow\">return</span> result<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">sumForOf</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arr</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword control-flow\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> item <span class=\"token keyword\">of</span> arr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    result <span class=\"token operator\">+=</span> item<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword control-flow\">return</span> result<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">sumForIn</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arr</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword control-flow\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token keyword\">in</span> arr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    result <span class=\"token operator\">+=</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword control-flow\">return</span> result<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">sumForEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arr</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  arr<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span> <span class=\"token arrow operator\">=></span> result <span class=\"token operator\">+=</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword control-flow\">return</span> result<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">sumReduce</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arr</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">return</span> arr<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">result<span class=\"token punctuation\">,</span> n</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> result <span class=\"token operator\">+</span> n<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n<span class=\"token punctuation\">}</span>\n\n</code></pre></div>\n<h3>시간 측정</h3>\n<p>함수의 실행 시간을 측정하기 위해 <code>performance.now()</code> 메서드를 이용하였습니다. 해당 함수는 <code>DOMHighResTimeStamp</code>를 반환하며, 해당 타입은 시간을 밀리초(ms, 10^-3 초) 단위로 나타냅니다.</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">getIterationTime</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">fn<span class=\"token punctuation\">,</span> arr</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> t0 <span class=\"token operator\">=</span> <span class=\"token dom variable\">performance</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> t1 <span class=\"token operator\">=</span> <span class=\"token dom variable\">performance</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword control-flow\">return</span> t1 <span class=\"token operator\">-</span> t0<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h3>테스트 실행 환경</h3>\n<p>자바스크립트의 주요 런타임인 브라우저 환경에서의 테스트를 위해 간단한 웹 문서를 작성해 테스트를 실행하고 출력하고자 하였습니다. 테스트는 L, N의 크기에 따라 긴 시간동안 메인 스레드를 점유하게 되므로,  WebWorker API를 이용해 메인 스레드가 아닌 Worker 스레드에서 실행되도록 하였습니다.</p>\n<h3>출력</h3>\n<p>각 함수의 실행 시간을 기준으로 함수이름과 실행 시간, 시간 배수을 오름차순 정렬하여 출력합니다.\r\n시간 배수는 각 함수의 성능을 쉽게 비교할 수 있도록, 함수 실행시간/최소 실행시간을 계산한 결과입니다.</p>\n<h2>테스트 실행</h2>\n<p>배열의 길이 L은 성능의 차이를 충분히 확인할 수 있도록 10000으로 설정하였습니다. 각 테스트는 독립시행이고, 시행횟수 N이 충분히 큰 경우 실행 결과의 평균의 분포는 정규분포에 근사하므로 시행횟수 N을 1000으로 설정하였습니다. 노트북의 크롬 브라우저를 통해 실행하였습니다.</p>\n<h2>테스트 결과</h2>\n<p>위의 테스트 조건을 통해 실행한 결과는 다음과 같습니다.</p>\n<p><img src=\"../assets/post-image/%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EB%B0%98%EB%B3%B5%EB%AC%B8-%EC%84%B1%EB%8A%A5-%EB%B2%A4%EC%B9%98%EB%A7%88%ED%81%AC/image-20210409163402633.png\" alt=\"image-20210409163402633\"></p>\n<ul>\n<li>알려진 대로 for loop가 가장 빠르고, while문이 비슷하게 빠른 것을 확인할 수 있습니다.</li>\n<li>배열의 길이 L을 저장해 사용하는 <code>sumForLoop2</code>가 <code>arr.length</code>를 사용한  <code>sumForLoop</code>보다 근소하게 빠르지만, 여러 번 시행하면 순위가 바뀌는 경우도 있습니다.</li>\n<li>배열 메서드인 forEach, reduce는 20배 정도의 차이를 보여주고 있습니다. 배열의 크기에 유의해서 사용해야할 것 같습니다.</li>\n<li>ECMAScript 1st Edition 부터 존재하던 for ... in이 압도적으로 느린 것을 확인할 수 있습니다. 배열의 반복이 아니라 객체의 반복을 위해 만들어진 문법이므로, 어찌보면 당연한 결과라고 생각할 수 있습니다.</li>\n<li>ES6에서 추가된 for ... of 는 애매하게 성능이 떨어지지만, 비슷한 수준의 문법적 편의성을 제공하는 forEach와 비교하면 10배 가량 빠른 것을 확인할 수 있습니다.</li>\n</ul>\n<blockquote>\n<p>주의 : L, N의 크기, 사용 기기 및 브라우저 등 다양한 환경 요소에 따라 성능이 달라질 수 있습니다.</p>\n<p>아래는 아이폰 12의 사파리 브라우저에서 실행한 결과로, 위의 테스트 결과에 비해 전반적으로 빠르고 최소시간과 최대시간의 차이가 더 작은 것을 확인할 수 있습니다.</p>\n<p><img src=\"../assets/post-image/%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EB%B0%98%EB%B3%B5%EB%AC%B8-%EC%84%B1%EB%8A%A5-%EB%B2%A4%EC%B9%98%EB%A7%88%ED%81%AC/image-20210409164950226.png\" alt=\"image-20210409164950226\"></p>\n</blockquote>\n<h2>결론</h2>\n<p>잘 알려진대로 for loop와 while문이 가장 빠르며, 배열 메서드와 for ... of 는 배열의 크기 등을 고려하면서 주의깊게 사용해야하겠습니다.</p>\n<p>for loop에서 배열의 길이를 변수에 저장하는 것은 속도에 큰 영향을 미치지 않습니다.</p>\n<p>향후 테스트 웹 어플리케이션에서 다른 작업 수행의 성능을 비교할 수 있도록 확장해봐야겠습니다.</p>\n","slug":"자바스크립트-반복문-성능-벤치마크"}},"__N_SSG":true}