{"pageProps":{"post":{"title":"WebWorkers API","date":"2021-04-09T00:00:00.000Z","content":"<p><a href=\"https://yes-xodnd.github.io/js_benchmark\">자바스크립트 반복문 벤치마크 웹 어플리케이션</a>을 만들면서, 연산 작업이 메인 스레드를 점유하고 애니메이션 업데이트 등 다른 작업을 막는 현상이 발생하였습니다.  <a href=\"https://developer.mozilla.org/ko/docs/Web/API/Web_Workers_API\">WebWorkers API</a>를 사용해 이를 해결할 수 있었고, 간단하게 웹 워커에 대해 정리해보았습니다.</p>\n<h3>개요</h3>\n<p>웹 워커는 메인 스레드와 분리된 백그라운드 스레드에서 스크립트 연산을 실행할 수 있도록 도와주는 Web API 입니다. 단일 스크립트에서만 사용하는 전용 워커(dedicated worker)와 여러 스크립트에서 공유할 수 있는 공유 워커(shared worker)가 있습니다.</p>\n<h3>전역 맥락</h3>\n<p>워커는 스크립트의 현재 전역 맥락(Window 객체)과 다른 전역 맥락에서 실행됩니다. 전용 워커, 공유워커의 전역 맥락은 각각 <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/DedicatedWorkerGlobalScope\">DedicatedWorkerGlobalScope </a>객체, <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/SharedWorkerGlobalScope\">SharedWorkerGlobalScope</a> 객체입니다.</p>\n<p>대부분의 코드를 실행할 수 있지만, 다른 전역 맥락을 가지고 있기 때문에 일부 메서드의 실행은 제한됩니다. 대표적으로 DOM 조작이 불가능하며, DOM 트리에 접근해 조작하는 것 뿐 아니라 <code>document.createElement</code>등으로 DOM 트리에 등록되지 않은 요소를 만드는 것도 불가능합니다.</p>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Functions_and_classes_available_to_workers\">MDN 문서</a>에서 워커가 사용할 수 있는 메서드를 확인할 수 있습니다.</p>\n<h3>워커 생성</h3>\n<p>워커는 window.Worker() 생성자를 통해 생성할 수 있습니다.</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> worker <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Worker</span><span class=\"token punctuation\">(</span>aURL<span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p><code>aURL</code>은 워커가 실행될 스크립트 파일의 URL로, 별도의 스크립트 전역 맥락(WorkerGlobalScope)를 가지게 됩니다. 일반적으로 파일에 접근하듯이 사용할 수도 있고, 현재 스크립트가 실행중인 도메인과 같은 도메인의 URL을 사용할 수도 있습니다.</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> worker1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Worker</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./worker.js'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> worker2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Worker</span><span class=\"token punctuation\">(</span><span class=\"token string\">'https://same-origin.com/somepath/worker.js'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p><code>options</code>를 이용해 워커의 설정을 변경할 수 있습니다. 사용 가능한 프로퍼티는 다음과 같습니다.</p>\n<ul>\n<li>type: <code>classic</code> 또는 <code>module</code> 로 지정됩니다. 기본값은 <code>classic</code>이며, <code>module</code>을 사용할 경우 워커 스크립트 파일에서 ES6 <code>import</code>를 사용할 수 있습니다.</li>\n<li>name: 전용 워커의 글로벌 스코프를 특정하는 이름을 지정합니다. 디버깅을 위해 사용됩니다.</li>\n<li>credentials: 워커를 사용하기 위해 필요한 자격 증명을 지정합니다. <code>omit</code>, <code>same-origin</code>, <code>include</code>를 지정할 수 있습니다. <code>classic</code>  type에서 기본값은 자격 증명이 필요없는 <code>omit</code>입니다.</li>\n</ul>\n<h3>워커 사용</h3>\n<p><code>postMessage</code> 메서드를 이용해 메인 스레드와 워커 스레드가 메세지를 전송하여 통신할 수 있습니다.</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// main thread</span>\nworker<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">postMessage</span><span class=\"token punctuation\">(</span>aMessage<span class=\"token punctuation\">,</span> transferList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// worker.js</span>\n<span class=\"token function\">postMessage</span><span class=\"token punctuation\">(</span>aMessage<span class=\"token punctuation\">,</span> transferList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p><code>aMessage</code>는 <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Structured_clone_algorithm\">structured clone 알고리즘</a>에 의해 복제될 수 있는 자바스크립트 객체라면 무엇이든 될 수 있습니다. 함수는 복제되지 않으며, 전송할 수 없습니다. 따라서 클래스를 전송해도 메서드는 전송되지 않습니다.</p>\n<p>optional 파라미터인 <code>transferList</code>는 <code>ArrayBuffer</code>, <code>MessagePort</code>등의 transferable 객체를 배열로 전달합니다.</p>\n<p><code>onmessage</code> 메서드는 상대방이 <code>postMessage</code>로 메세지를 전송했을 때의 이벤트 핸들러를 정의할 수 있습니다.</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// main thread</span>\n<span class=\"token keyword\">const</span> worker <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Worker</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./worker.js'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nworker<span class=\"token punctuation\">.</span><span class=\"token method-variable function-variable method function property-access\">onmessage</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span>\n                        \n<span class=\"token comment\">// worker.js</span>\n<span class=\"token function-variable function\">onmessage</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>이벤트가 발생하면 핸들러에 <code>MessageEvent</code> 객체가 전달됩니다. <code>postMessage</code>로 전달한 데이터(<code>aMessage</code>)는 <code>data</code> 프로퍼티로 접근할 수 있습니다.</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// main thread</span>\nworker<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">postMessage</span><span class=\"token punctuation\">(</span><span class=\"token string\">'web worker is fun!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// worker.js</span>\n<span class=\"token function-variable function\">onmessage</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">e</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span><span class=\"token property-access\">data</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// web worker is fun!</span>\n\t<span class=\"token function\">postMessage</span><span class=\"token punctuation\">(</span><span class=\"token string\">'yes'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// main thread</span>\nworker<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">onmessage</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span><span class=\"token property-access\">data</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// yes</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h2>WorkerGlobalScope.importScripts()</h2>\n<p>위에서 볼 수 있듯이, 웹 워커를 생성할 때 options의 type 프로퍼티를 <code>module</code>로 지정하여 ES6 module 문법을 사용할 수 있습니다.</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// main thread</span>\n<span class=\"token keyword\">const</span> worker <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Worker</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./worker.js'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> type<span class=\"token operator\">:</span> <span class=\"token string\">'module'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// worker.js</span>\n<span class=\"token keyword module\">import</span> <span class=\"token imports\">someUtil</span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'../util'</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">// ...</span>\n</code></pre></div>\n<p>하지만 사파리를 비롯한 많은 브라우저에서 지원하지 않기 때문에,  주의해서 사용해야 합니다.</p>\n<p><img src=\"../assets/post-image/WebWorkers-API/es6module_browser_support.png\" alt=\"image-20210409190614376\"></p>\n<p>그럼에도 외부 스크립트를 import해서 사용해야한다면, <code>importScripts</code> 메서드를 사용할 수 있습니다.\r\n워커의 전역 맥락에 해당 스크립트를 동기적으로 불러와 사용할 수 있습니다.</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// hello.js</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">greeting</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">hello, </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">!</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// worker.js</span>\n<span class=\"token function\">importScripts</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./hello.js'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">greeting</span><span class=\"token punctuation\">(</span><span class=\"token string\">'john'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// hello, john!</span>\n</code></pre></div>\n<p>주의할 점은, 해당 스크립트에 ES6 module 문법이 작성되어 있으면 <code>Uncaught DomException</code> 오류가 발생하여 실행되지 않습니다.</p>\n","slug":"WebWorkers-API"}},"__N_SSG":true}