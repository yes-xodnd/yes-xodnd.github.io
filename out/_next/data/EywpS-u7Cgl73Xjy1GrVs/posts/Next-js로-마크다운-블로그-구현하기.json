{"pageProps":{"post":{"title":"next.js로 마크다운 블로그 구현하기","date":"2021-04-11T00:00:00.000Z","content":"<p>기술 블로그를 운영하기 위해 여러가지 서비스를 찾아다니다가, github pages를 통해 호스팅되는 개발자 블로그를 많이 보게 되었습니다. Jekyll이라는 정적 사이트 생성기를 이용하면 5분 만에 블로그를 만들 수 있다는 글들이 많아 혹했으나, 프론트엔드 개발자로서 직접 만들어보고 싶다는 생각을 하게 되었습니다.</p>\n<p>Next를 이용하면 마크다운 정적 블로그를 구현할 수 있다는 것을 알게 되어 이번 기회에 학습과 토이 프로젝트 진행, 기술 블로그 제작까지 세 마리 토끼를 한 번에 잡아보고자 하였습니다.</p>\n<h2>초기 설정</h2>\n<p><code>create-next-app</code>을 사용하지 않고, 필요한 요소들을 하나씩 manual setup을 해보기로 했습니다.\r\n<code>next.config.js</code> 파일이 없지만 next에서 기본 설정을 사용합니다.</p>\n<h3>npm 패키지 설치</h3>\n<p>Next 공식 홈페이지의 설명을 따라 React와 Next를 설치합니다.</p>\n<div class=\"remark-highlight\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> next react react-dom\n</code></pre></div>\n<p>프로젝트 폴더에는 <code>node-modules</code>폴더와 <code>package.json</code>, <code>package-lock.json</code> 두 개의 기본적인 json 파일이 생성되었습니다.</p>\n<p><code>package.json</code>파일에서 <code>\"scripts\"</code> 를 작성하여 필요한 next 명령어를 등록해줍니다.</p>\n<div class=\"remark-highlight\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token comment\">// package.json</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"dependencies\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"next\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^10.0.9\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"react\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^17.0.2\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"react-dom\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^17.0.2\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"dev\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"next dev\"</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token property\">\"export\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"next build &#x26;&#x26; next export\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p><code>npm run dev</code>를 통해 프로젝트를 개발 환경에서 실행할 수 있습니다.\r\n<code>npm run export</code>를 통해 빌드 후 <code>out/</code> 디렉토리에 정적 사이트 리소스를 생성할 수 있습니다.</p>\n<h3>기본 폴더 구조 설정</h3>\n<p>Next에서 각 url 주소는 <code>pages</code> 폴더 아래의 경로 및 파일과 상응합니다. <code>pages</code>폴더를 생성하고, 그 안에 <code>index.js</code> 파일을 생성해줍니다.</p>\n<div class=\"remark-highlight\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">mkdir</span> pages\n<span class=\"token function\">touch</span> pages/index.js\n</code></pre></div>\n<p><code>pages/index.js</code>는 기본 경로에서 표시할 컴포넌트입니다. 간단한 함수 컴포넌트를 정의하여 제대로 렌더링되는지 확인해보겠습니다.</p>\n<div class=\"remark-highlight\"><pre class=\"language-react\"><code class=\"language-react\">// pages/index.js\r\nfunction HomePage() {\r\n  return &#x26;lt;div&#x26;gt;Welcome to Next!&#x26;lt;/div&#x26;gt;\r\n}\r\n\r\nexport default HomePage</code></pre></div>\n<p>위에서 <code>package.json</code>에 작성한 npm 명령어를 통해 개발 버전으로 확인해보겠습니다.</p>\n<div class=\"remark-highlight\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> run dev\n</code></pre></div>\n<p>터미널에 ready 표시와 함께 출력되는 url을 통해 작성한 Next 앱을 확인할 수 있습니다.</p>\n<p><img src=\"../assets/post-image/Next-js%EB%A1%9C-%EB%A7%88%ED%81%AC%EB%8B%A4%EC%9A%B4-%EB%B8%94%EB%A1%9C%EA%B7%B8-%EA%B5%AC%ED%98%84%ED%95%98%EA%B8%B0/run-dev.png\" alt=\"run-dev\"></p>\n<p>브라우저에서 해당 주소로 접속하면 <code>build page: /</code> 가 출력되고, 해당 컴포넌트를 컴파일해 화면에 보여줍니다.</p>\n<p><img src=\"../assets/post-image/Next-js%EB%A1%9C-%EB%A7%88%ED%81%AC%EB%8B%A4%EC%9A%B4-%EB%B8%94%EB%A1%9C%EA%B7%B8-%EA%B5%AC%ED%98%84%ED%95%98%EA%B8%B0/run-dev-success.png\" alt=\"run-dev-success\"></p>\n<h2>배포</h2>\n<p>정적 사이트로 배포하기 위해 <code>next build</code> 를 실행한 뒤 <code>next export</code>를 실행하고, 빌드로 생성된 <code>out/</code> 디렉토리의 파일들을 github pages 호스팅의 소스코드로 사용하도록 하였습니다.</p>\n<p>이를 위해 git subtree 기능을 이용하여 <code>gh-pages </code> 브랜치를 생성하고, <code>package.json</code> 파일에서 <code>deploy</code> 명령어를 추가하여 <code>next export</code>와 git subtree 푸시를 한 번에 해결할 수 있도록 하였습니다.</p>\n<div class=\"remark-highlight\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token comment\">// package.json</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">//...</span>\n  <span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token property\">\"dev\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"next dev\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"predeploy\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"next build &#x26;&#x26; next export\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"deploy\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"git add out &#x26;&#x26; git commit -m 'deploy gh pages' &#x26;&#x26; git subtree push --prefix out origin gh-pages\"</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h2>배포 - 트러블슈팅</h2>\n<h3>문제</h3>\n<p>github pages로 배포해 테스트해보니, <code>index.html</code>이 로드된 후 404 에러와 함께 필요한 리소스를 불러오지 못하는 문제가 발생했습니다.</p>\n<h3>해결</h3>\n<p>검색을 통해 <code>.nojekyll</code> 파일을 생성해 함께 배포하여 해결할 수 있었습니다. npm 명령어에서 다음과 같이 설정해주었습니다.</p>\n<div class=\"remark-highlight\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token comment\">// package.json</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">//...</span>\n  <span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"dev\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"next dev\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"predeploy\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"next build &#x26;&#x26; next export\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"deploy\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"touch out/.nojekyll &#x26;&#x26; git add out &#x26;&#x26; git commit -m 'deploy gh pages' &#x26;&#x26; git subtree push --prefix out origin gh-pages\"</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h2>원인</h2>\n<p>Jekyll에서는 <code>_config.yaml</code>이라는 이름의 설정 파일을 사용하며, 이 파일 이외의 언더스코어(_) 로 시작하는 파일과 디렉토리는 무시합니다. Next의 리소스는 <code>_next/</code> 디렉토리에서 불러와야 하므로, <code>.nojekyll</code> 파일이 없으면 github pages에서 Jekyll의 이런 설정을 그대로 사용하여 해당 디렉토리를 무시하기 때문에 발생하는 문제입니다.</p>\n<h2>참고자료</h2>\n<blockquote>\n<p><a href=\"https://boramyy.github.io/dev/front-end/nextjs/deploy-gh-pages/\">Boram Kim님 블로그</a></p>\n<p><a href=\"https://talk.jekyllrb.com/t/jekyll-ignores-files-with-underscores/3909\">Jekyllrb 게시글</a></p>\n</blockquote>\n<h2>markdown 문서 메타 데이터: front-matter</h2>\n<p>front-matter는 문서에 대한 메타 데이터로, 아래와 같이 markdown 파일의 맨 앞에 3개의 대시(-)로 감싸 작성합니다.</p>\n<div class=\"remark-highlight\"><pre class=\"language-markdown\"><code class=\"language-markdown\"><span class=\"token front-matter-block\"><span class=\"token punctuation\">---</span>\n<span class=\"token font-matter yaml language-yaml\"><span class=\"token key atrule\">title</span><span class=\"token punctuation\">:</span> gray<span class=\"token punctuation\">-</span>matter로 front<span class=\"token punctuation\">-</span>matter 파싱하기\n<span class=\"token key atrule\">date</span><span class=\"token punctuation\">:</span> <span class=\"token datetime number\">2021-03-21</span>\n<span class=\"token key atrule\">author</span><span class=\"token punctuation\">:</span> yes<span class=\"token punctuation\">-</span>xodnd</span>\n<span class=\"token punctuation\">---</span></span>\n</code></pre></div>\n<p>이를 파싱하기 위해 <code>gray-matter</code> 라이브러리를 설치하여 사용하였습니다.</p>\n<div class=\"remark-highlight\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> gray-matter\n</code></pre></div>\n<p><code>/_posts</code> 폴더에 markdown 파일을 생성하고, front-matter 파싱을 테스트하였습니다.\r\n경로를 찾고 파일을 읽어들이기 위해 node.js의 기본 모듈인 <code>fs</code>, <code>path</code>를 사용하였습니다.</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// lib/posts.js</span>\n<span class=\"token keyword\">const</span> fs <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fs'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> path <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'path'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> matter <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'gray-matter'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> postsPath <span class=\"token operator\">=</span> path<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">join</span><span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">cwd</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'_posts'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">getPostsGrayMattered</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> fileNames <span class=\"token operator\">=</span> fs<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">readdirSync</span><span class=\"token punctuation\">(</span>postsPath<span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">const</span> allPosts <span class=\"token operator\">=</span> fileNames<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">fileName</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> filePath <span class=\"token operator\">=</span> path<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">join</span><span class=\"token punctuation\">(</span>postsPath<span class=\"token punctuation\">,</span> fileName<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">const</span> fileContent <span class=\"token operator\">=</span> fs<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">readFileSync</span><span class=\"token punctuation\">(</span>filePath<span class=\"token punctuation\">,</span> <span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword control-flow\">return</span> <span class=\"token function\">matter</span><span class=\"token punctuation\">(</span>fileContent<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword control-flow\">return</span> allPosts\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p><code>getPostsGrayMattered()</code>의 결과는 다음과 같이 반환됩니다.</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span>\n    content<span class=\"token operator\">:</span> <span class=\"token string\">'\\r\\n## gray-matter\\r\\n\\r\\ngray matter를 통해 front-matter를 파싱할 수 있습니다. '</span><span class=\"token punctuation\">,</span>\n    data<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      title<span class=\"token operator\">:</span> <span class=\"token string\">'gray-matter로 front-matter 파싱하기'</span><span class=\"token punctuation\">,</span>\n      date<span class=\"token operator\">:</span> <span class=\"token number\">2021</span><span class=\"token operator\">-</span><span class=\"token number\">03</span><span class=\"token operator\">-</span><span class=\"token number\">26</span><span class=\"token maybe-class-name\">T00</span><span class=\"token operator\">:</span><span class=\"token number\">00</span><span class=\"token operator\">:</span><span class=\"token number\">00.000</span>Z<span class=\"token punctuation\">,</span>\n      author<span class=\"token operator\">:</span> <span class=\"token string\">'yes-xodnd'</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    isEmpty<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n    excerpt<span class=\"token operator\">:</span> <span class=\"token string\">''</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">]</span>\n</code></pre></div>\n<p>front-matter 영역에 작성한 <code>title</code>, <code>date</code>, <code>author</code>가 파싱되어 <code>data</code> 객체로 반환된 것을 확인할 수 있습니다.\r\nfront-matter를 제외한 내용은 <code>content</code>에 아직 HTML로 파싱되지 않은 string으로 저장되어 있습니다.</p>\n<h2>마크다운 html로 변환하기</h2>\n<p>Next 공식 홈페이지의 <a href=\"https://github.com/vercel/next.js/tree/canary/examples/blog-starter\">blog-starter</a> 예시를 따라 <code>remark</code>를 설치해 사용했습니다.</p>\n<div class=\"remark-highlight\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> remark remark-html\n</code></pre></div>\n<p><code>gray-matter</code>를 이용해 md 문서를 파싱한 반환값의 <code>content</code> 값을 아래 <code>markdownToHtml</code> 함수에 전달합니다.\r\nhtml 요소로 변환된 문자열 값이 반환됩니다.</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// lib/markdownToHtml.js</span>\n<span class=\"token keyword module\">import</span> <span class=\"token imports\">remark</span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'remark'</span>\n<span class=\"token keyword module\">import</span> <span class=\"token imports\">html</span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'remark-html'</span>\n\n<span class=\"token keyword module\">export</span> <span class=\"token keyword module\">default</span> <span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">markdownToHtml</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">markdown</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token keyword control-flow\">await</span> <span class=\"token function\">remark</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">use</span><span class=\"token punctuation\">(</span>html<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">process</span><span class=\"token punctuation\">(</span>markdown<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword control-flow\">return</span> result<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h2>문서 내 코드블록 파싱 및 하이라이트</h2>\n<p>기술 블로그이기 때문에, 마크다운 문서 내에 많은 코드를 작성하게 됩니다.</p>\n<p>이를 읽기 좋게 하이라이트 하려면 우선 코드블록 내 문자열을 분류하고, 스타일을 적용할 수 있도록 특정 태그로 감싸줍니다. 여러 라이브러리를 이용할 수 있으나, 코드 하이라이트 라이브러리 <code>prism</code>의 <code>remark</code> 호환버전인 <code>remark-prism</code>을 이용하였습니다.</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// lib/markdown.js</span>\n<span class=\"token keyword module\">import</span> <span class=\"token imports\">remark</span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'remark'</span>\n<span class=\"token keyword module\">import</span> <span class=\"token imports\">html</span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'remark-html'</span>\n<span class=\"token keyword module\">import</span> <span class=\"token imports\">prism</span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'remark-prism'</span>\n\n<span class=\"token keyword module\">export</span> <span class=\"token keyword module\">default</span> <span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">markdownToHtml</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">markdown</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token keyword control-flow\">await</span> <span class=\"token function\">remark</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token method function property-access\">use</span><span class=\"token punctuation\">(</span>html<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token method function property-access\">use</span><span class=\"token punctuation\">(</span>prism<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token method function property-access\">process</span><span class=\"token punctuation\">(</span>markdown<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword control-flow\">return</span> result<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n","slug":"Next-js로-마크다운-블로그-구현하기"}},"__N_SSG":true}